name: Kubernetes Application Deployment

on:
  push:
    branches: [main]
    paths:
      - 'k8s-manifests/**'
  workflow_run:
    workflows: ["Terraform Apply (Main Branch)"]
    types:
      - completed

env:
  AWS_REGION: us-west-2

permissions:
  id-token: write
  contents: read

jobs:
  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate Kubernetes manifests
        run: |
          for file in k8s-manifests/**/*.yaml; do
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file"
          done

      - name: Get cluster names from Terraform
        id: clusters
        run: |
          cd infrastructure

          # Validate Terraform state exists
          if [ ! -f ".terraform/terraform.tfstate" ] && [ ! -f "terraform.tfstate" ]; then
            echo "❌ Terraform state not found"
            exit 1
          fi

          # Get outputs with error handling
          GATEWAY_CLUSTER=$(terraform output -raw gateway_cluster_name 2>/dev/null || echo "")
          BACKEND_CLUSTER=$(terraform output -raw backend_cluster_name 2>/dev/null || echo "")

          if [ -z "$GATEWAY_CLUSTER" ] || [ -z "$BACKEND_CLUSTER" ]; then
            echo "❌ Failed to get cluster names from Terraform outputs"
            echo "Available outputs:"
            terraform output
            exit 1
          fi

          echo "gateway_cluster=$GATEWAY_CLUSTER" >> $GITHUB_OUTPUT
          echo "backend_cluster=$BACKEND_CLUSTER" >> $GITHUB_OUTPUT

          echo "✅ Gateway Cluster: $GATEWAY_CLUSTER"
          echo "✅ Backend Cluster: $BACKEND_CLUSTER"

      - name: Deploy Backend Service
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.clusters.outputs.backend_cluster }}
          kubectl apply -f k8s-manifests/backend/
          kubectl rollout status deployment/backend-service -n backend --timeout=300s

      - name: Deploy Gateway Service
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.clusters.outputs.gateway_cluster }}
          kubectl apply -f k8s-manifests/gateway/
          kubectl rollout status deployment/gateway-service -n gateway --timeout=300s

      - name: Test Connectivity
        run: |
          # Test backend service (should be internal only)
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.clusters.outputs.backend_cluster }}
          kubectl get svc -n backend

          # Test gateway service (should be publicly accessible)
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.clusters.outputs.gateway_cluster }}
          kubectl get svc -n gateway

          # Wait for ALB to be ready and test end-to-end connectivity
          sleep 60
          ALB_DNS=$(kubectl get svc gateway-service -n gateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Testing connectivity to: http://$ALB_DNS"
          curl -f "http://$ALB_DNS/health" || echo "Health check failed"

      - name: Security Validation
        run: |
          echo "🔒 Running security validation..."
          # Verify backend service is not accessible from internet
          # This would be expanded with actual security tests
          echo "✅ Security validation completed"
