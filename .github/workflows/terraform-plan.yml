---
name: Terraform Plan (PR Validation)

on:
  pull_request:
    branches: [main]
    paths:
      - "infrastructure/**"
      - "modules/**"
      - ".github/workflows/terraform-*.yml"

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: us-west-2

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check AWS Role Configuration
        run: |
          if [ -z "${{ secrets.AWS_ROLE_ARN }}" ]; then
            echo "‚ùå AWS_ROLE_ARN secret is not configured"
            echo "Please configure the AWS_ROLE_ARN secret in your repository settings."
            echo "See: https://docs.github.com/en/actions/security-guides/encrypted-secrets"
            echo ""
            echo "Required setup:"
            echo "1. Create an IAM role with OIDC trust policy for GitHub Actions"
            echo "2. Add the role ARN as AWS_ROLE_ARN secret in repository settings"
            echo "3. Ensure the role has necessary permissions for Terraform operations"
            exit 1
          fi
          echo "‚úÖ AWS_ROLE_ARN secret is configured"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infrastructure
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./infrastructure
        continue-on-error: true

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint
        run: |
          tflint --init
          tflint --recursive
        working-directory: ./

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./infrastructure
        continue-on-error: true

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infrastructure/tfplan

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
