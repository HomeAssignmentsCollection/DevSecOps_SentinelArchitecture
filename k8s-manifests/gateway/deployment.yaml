apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: gateway
  labels:
    app: gateway-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
        version: v1
    spec:
      containers:
      - name: gateway
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: html
          mountPath: /usr/share/nginx/html
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: gateway-nginx-config
      - name: html
        configMap:
          name: gateway-html-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-nginx-config
  namespace: gateway
data:
  default.conf: |
    upstream backend {
        # Backend service in the backend VPC
        # This will be resolved via VPC peering
        server backend-service.backend.svc.cluster.local:80;
    }

    server {
        listen 80;
        server_name _;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Root endpoint - show gateway info
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy to backend service
        location /api/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Backend health check proxy
        location /backend-health {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-html-config
  namespace: gateway
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Sentinel Gateway Service</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f8f9fa; }
            .container { max-width: 800px; margin: 0 auto; padding: 20px; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { color: #2c3e50; text-align: center; margin-bottom: 30px; }
            .info { background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 10px 0; }
            .status { color: #27ae60; font-weight: bold; }
            .endpoint { background: #3498db; color: white; padding: 10px; border-radius: 5px; margin: 5px 0; }
            .endpoint a { color: white; text-decoration: none; }
            .endpoint a:hover { text-decoration: underline; }
            button { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin: 5px; }
            button:hover { background: #2980b9; }
            #result { background: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 20px; border-left: 4px solid #3498db; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="header">üåê Sentinel Gateway Service</h1>
            <div class="info">
                <h3>Service Information</h3>
                <p><strong>Cluster:</strong> Gateway EKS Cluster</p>
                <p><strong>Namespace:</strong> gateway</p>
                <p><strong>Service Type:</strong> Public (LoadBalancer)</p>
                <p><strong>Status:</strong> <span class="status">‚úÖ Running</span></p>
            </div>
            <div class="info">
                <h3>Available Endpoints</h3>
                <div class="endpoint">
                    <strong>Health Check:</strong> <a href="/health">/health</a>
                </div>
                <div class="endpoint">
                    <strong>Backend Proxy:</strong> <a href="/api/">/api/</a> (proxies to backend service)
                </div>
                <div class="endpoint">
                    <strong>Backend Health:</strong> <a href="/backend-health">/backend-health</a>
                </div>
            </div>
            <div class="info">
                <h3>Test Connectivity</h3>
                <p>Test the connection to the backend service through VPC peering:</p>
                <button onclick="testBackend()">Test Backend Connection</button>
                <button onclick="testBackendHealth()">Test Backend Health</button>
                <div id="result"></div>
            </div>
            <div class="info">
                <h3>Architecture</h3>
                <p>üåê Internet ‚Üí ALB ‚Üí Gateway Pod ‚Üí VPC Peering ‚Üí Backend Pod</p>
                <p>‚úÖ Gateway VPC: 10.0.0.0/16</p>
                <p>‚úÖ Backend VPC: 10.1.0.0/16</p>
                <p>‚úÖ Secure cross-VPC communication</p>
            </div>
        </div>
        <script>
            async function testBackend() {
                const result = document.getElementById('result');
                result.innerHTML = 'Testing backend connection...';
                try {
                    const response = await fetch('/api/');
                    const text = await response.text();
                    result.innerHTML = `<strong>‚úÖ Backend Response:</strong><br><pre>${text}</pre>`;
                } catch (error) {
                    result.innerHTML = `<strong>‚ùå Error:</strong> ${error.message}`;
                }
            }

            async function testBackendHealth() {
                const result = document.getElementById('result');
                result.innerHTML = 'Testing backend health...';
                try {
                    const response = await fetch('/backend-health');
                    const text = await response.text();
                    result.innerHTML = `<strong>‚úÖ Backend Health:</strong><br><pre>${text}</pre>`;
                } catch (error) {
                    result.innerHTML = `<strong>‚ùå Error:</strong> ${error.message}`;
                }
            }
        </script>
    </body>
    </html>
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gateway-hpa
  namespace: gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gateway-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
