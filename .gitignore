# Terraform
*.tfstate
*.tfstate.*
*.tfplan
*.tfvars.backup
.terraform/
.terraform.lock.hcl
crash.log
crash.*.log

# Terraform backend files
backend.tfplan
destroy.tfplan

# AWS
.aws/
aws-credentials

# Kubernetes
kubeconfig
*.kubeconfig
.kube/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Temporary files
*.tmp
*.temp
.tmp/
.temp/

# Secrets
secrets/
*.pem
*.key
*.crt
*.p12

# Node modules (if using Node.js tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Python (if using Python tools)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
pip-log.txt
pip-delete-this-directory.txt

# Backup files
*.backup
*.bak

# Local environment files
.env
.env.local
.env.*.local

# Coverage reports
coverage/
*.cover
.coverage
.nyc_output

# Documentation build
docs/_build/
site/

# Cache
.cache/
*.cache

# Helm
charts/*.tgz

# Kustomize
kustomization.yaml.bak

# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
